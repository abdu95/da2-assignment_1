# Clear memory and call packages
rm(list=ls())
getwd()
library(WDI)
library(tidyverse)
# Download COVID cross-sectional data
date <- '31-10-2020'
covid_url <- paste0('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/',
date,'.csv')
covid_raw <- read.csv(covid_url)
# Download COVID cross-sectional data
date <- '10-31-2020'
covid_url <- paste0('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/',
date,'.csv')
covid_raw <- read.csv(covid_url)
View(covid_raw)
# Download population data for 2019
pop_raw <- WDI(indicator=c('SP.POP.TOTL'),
country="all", start=2019, end=2019)
View(pop_raw)
# Save the raw files
my_path <- "../data/"
# covid data
write_csv(covid_raw, paste0(my_path,'raw/covid_31_10_2020_raw.csv'))
View(pop_raw)
# population data
write_csv(pop_raw, paste0(my_path,'raw/pop_WDI_2019.csv'))
View(covid_raw)
getwd()
# Clear memory and call packages
rm(list=ls())
library(tidyverse)
# Read the raw files
my_path <- "../data/"
# covid data
cv <- read_csv(paste0(my_path,'raw/covid_31_10_2020_raw.csv'))
# population data
pop <- read_csv(paste0(my_path,'raw/pop_WDI_2019.csv'))
?glimpse
####
# COVID DATA CLEANING
#
# Check covid data
glimpse( cv )
# Drop not needed variables
cv <- cv %>% select( -c( FIPS,Admin2,Last_Update,Lat,Long_,Combined_Key,Incidence_Rate,Case.Fatality_Ratio))
View(cv)
# covid data
cv <- read_csv(paste0(my_path,'raw/covid_31_10_2020_raw.csv'))
# Drop not needed variables
cv <- cv %>% select( -c( FIPS,Admin2,Last_Update,Lat,Long_,Combined_Key,Incidence_Rate,Case.Fatality_Ratio))
View(cv)
# One observation to be one country
# Check e.g. China:
cv %>% filter( Country_Region == 'China')
# One observation to be one country
# Check e.g. China:
what <- cv %>% filter( Country_Region == 'China')
View(what)
rm(what)
# One observation to be one country
# Check e.g. China:
cv %>% filter( Country_Region == 'China')
# Create new data table now only contains the countries
cv2 <- cv %>%
group_by( Country_Region ) %>%
summarise_if(is.numeric,lst( sum ) )
View(cv2)
# One observation to be one country
# Check e.g. China:
cv %>% filter( Country_Region == 'China')
# One observation to be one country
# Check e.g. China:
cv2 %>% filter( Country_Region == 'China')
# Create new data table now only contains the countries
cv2 <- cv %>%
group_by( Country_Region ) %>%
summarise_if(is.numeric,lst( sum ) )
# Rename variables
cv2 <- cv2 %>% rename( country   = Country_Region ,
confirmed = Confirmed_sum,
death     = Deaths_sum,
recovered = Recovered_sum,
active    = Active_sum )
View(pop)
## Check the observations:
# 1) Filter out grouping observations based on using digits
pop <- pop %>% filter( !grepl("[[:digit:]]", pop$iso2c) )
# population data
pop <- read_csv(paste0(my_path,'raw/pop_WDI_2019.csv'))
## Check the observations:
# 1) Filter out grouping observations based on using digits
pop <- pop %>% filter( !grepl("[[:digit:]]", pop$iso2c) )
# 2nd drop specific values
drop_id <- c("EU","HK","OE")
pop <- pop %>% filter( !grepl( paste( drop_id , collapse="|"), pop$iso2c ) )
# 3rd drop values with certain starting char
# Get the first letter from iso2c
fl_iso2c <- substr(pop$iso2c, 1, 1)
retain_id <- c("XK","ZA","ZM","ZW")
# Filter out everything which starts X or Z except countries in retain_id
pop <- pop %>% filter( !( grepl( "X", fl_iso2c ) | grepl( "Z", fl_iso2c ) &
!grepl( paste( retain_id , collapse="|"), pop$iso2c ) ) )
rm( drop_id, fl_iso2c , retain_id )
# Retain and rename variables which are going to be used later
pop <-pop %>% transmute( country = country,
population=SP.POP.TOTL )
df <- full_join(cv2,pop)
View(df)
# Correct some country names by hand
use_name <- c("Congo, Rep.","Congo, Dem. Rep.","Czech Republic","Korea, Rep.","Kyrgyz Republic",
"Laos","St. Kitts and Nevis","St. Lucia","St. Vincent and the Grenadines",
"Slovak Republic","United States","Myanmar")
alter_name <- c("Congo (Brazzaville)","Congo (Kinshasa)","Czechia","Korea, South","Kyrgyzstan",
"Lao PDR","Saint Kitts and Nevis","Saint Lucia","Saint Vincent and the Grenadines",
"Slovakia","US","Burma")
# Simply use a for-cycle to change the name for the countries (note: ordering is important)
for ( i in seq_along( use_name ) ){
df$country[ df$country == alter_name[ i ] ] <- use_name[ i ]
}
View(pop)
View(df)
View(df)
df <- full_join(cv2,pop)
View(df)
# Correct some country names by hand
use_name <- c("Congo, Rep.","Congo, Dem. Rep.","Czech Republic","Korea, Rep.","Kyrgyz Republic",
"Laos","St. Kitts and Nevis","St. Lucia","St. Vincent and the Grenadines",
"Slovak Republic","United States","Myanmar")
alter_name <- c("Congo (Brazzaville)","Congo (Kinshasa)","Czechia","Korea, South","Kyrgyzstan",
"Lao PDR","Saint Kitts and Nevis","Saint Lucia","Saint Vincent and the Grenadines",
"Slovakia","US","Burma")
# Simply use a for-cycle to change the name for the countries (note: ordering is important)
for ( i in seq_along( use_name ) ){
df$country[ df$country == alter_name[ i ] ] <- use_name[ i ]
}
View(df)
df %>% filter( is.na(population) )
# Write a for-loop to find those which are partial or complete matches!
# 1) auxillary table for countries without any population value
aux <- df %>% filter( is.na(population) )
# 2) Get the name of the countries
countries_nm <- aux$country
countries_nm
View(pop)
View(aux)
?str_detec
?str_detect
View(df)
# 3) Iterate through all potential partial matches
for ( i in seq_along( countries_nm ) ){
# Select those observations where partial match exists
log_select <- ?str_detect( df$country , countries_nm[ i ] )
# Get the population values for partial matches
c_partial <- df$population[ log_select ]
# If there is a match: only two countries are selected and one is missing the other has population:
if ( length( c_partial ) == 2 & sum( is.na( c_partial ) ) == 1 ){
# Replace the missing value with the match
df$population[ log_select & is.na(df$population)] = c_partial[ !is.na( c_partial ) ]
# Remove the replaced variable
df <- df %>% filter( !(log_select & is.na( df$confirmed ) ) )
}
}
View(df)
View(df)
# 4) Check the results:
df %>% filter( is.na(population) )
#####
# Handle missing values:
View( df %>% filter( !complete.cases(df) ) )
# Drop if population, confirmed cases or death is missing
df <- df %>% filter( !( is.na( population ) | is.na( confirmed ) | is.na( death ) ))
#####
# Save clean data
my_path <- "../data/"
# COVID data
write_csv( df , paste0(my_path,'clean/covid_pop_09_11_2020_clean.csv'))
# Clear memory
rm(list=ls())
# Packages to use
library(tidyverse)
# For scaling ggplots
require(scales)
# Estimate piecewise linear splines
#install.packages("lspline")
library(lspline)
# Estimate robust SE
#install.packages("estimatr")
library(estimatr)
# Compare models with robust SE
#install.packages("texreg")
library(texreg)
# For different themes
#install.packages(ggthemes)
library(ggthemes)
# Call the data from file
my_file <- "../data/clean/covid_pop_09_11_2020_clean.csv"
df <- read_csv(my_file)
####
#
# Quick check on all HISTOGRAMS
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~key, scales = "free") +
geom_histogram()+
theme_wsj() +
scale_fill_wsj()
View(df)
summary( df )
######
# Check basic scatter-plot:
#     No_of_death = alpha + beta * No_of_cases
#
# Where to use log-transformation? - level-level vs level-log vs log-level vs log-log
#
# 1) death - No_of_cases: level-level model without scaling
ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020)",y = "Number of registered death")
####
#
# Quick check on all HISTOGRAMS
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~key, scales = "free") +
geom_histogram()+
theme_wsj() +
scale_fill_wsj()
what <- select(df, population > 300000000)
what <- select(df, df$population > 300000000)
what <- select(df, df$population < 300000000)
what <- subset(df, df$population < 300000000)
View(what)
df <- subset(df, df$population < 300000000)
rm(what)
summary( df )
filter(!complete.cases(df))
df %>% filter(!complete.cases(df))
# Clear memory and call packages
rm(list=ls())
library(tidyverse)
# Read the raw files
my_path <- "../data/"
# covid data
cv <- read_csv(paste0(my_path,'raw/covid_31_10_2020_raw.csv'))
# population data
pop <- read_csv(paste0(my_path,'raw/pop_WDI_2019.csv'))
####
# COVID DATA CLEANING
#
# Check covid data
glimpse( cv )
# Drop not needed variables
cv <- cv %>% select( -c( FIPS,Admin2,Last_Update,Lat,Long_,Combined_Key,Incidence_Rate,Case.Fatality_Ratio))
# One observation to be one country
# Check e.g. China:
cv %>% filter( Country_Region == 'China')
View(cv)
# One observation to be one country
# Check e.g. China:
cv %>% filter( Country_Region == 'China')
# Create new data table now only contains the countries
cv2 <- cv %>%
group_by( Country_Region ) %>%
summarise_if(is.numeric,lst( sum ) )
# Rename variables
cv2 <- cv2 %>% rename( country   = Country_Region ,
confirmed = Confirmed_sum,
death     = Deaths_sum,
recovered = Recovered_sum,
active    = Active_sum )
## Check the observations:
# 1) Filter out grouping observations based on using digits
pop <- pop %>% filter( !grepl("[[:digit:]]", pop$iso2c) )
# 2nd drop specific values
drop_id <- c("EU","HK","OE")
pop <- pop %>% filter( !grepl( paste( drop_id , collapse="|"), pop$iso2c ) )
# 3rd drop values with certain starting char
# Get the first letter from iso2c
fl_iso2c <- substr(pop$iso2c, 1, 1)
retain_id <- c("XK","ZA","ZM","ZW")
# Filter out everything which starts X or Z except countries in retain_id
pop <- pop %>% filter( !( grepl( "X", fl_iso2c ) | grepl( "Z", fl_iso2c ) &
!grepl( paste( retain_id , collapse="|"), pop$iso2c ) ) )
rm( drop_id, fl_iso2c , retain_id )
# Retain and rename variables which are going to be used later
pop <-pop %>% transmute( country = country,
population=SP.POP.TOTL )
df <- full_join(cv2,pop)
# Correct some country names by hand
use_name <- c("Congo, Rep.","Congo, Dem. Rep.","Czech Republic","Korea, Rep.","Kyrgyz Republic",
"Laos","St. Kitts and Nevis","St. Lucia","St. Vincent and the Grenadines",
"Slovak Republic","United States","Myanmar")
alter_name <- c("Congo (Brazzaville)","Congo (Kinshasa)","Czechia","Korea, South","Kyrgyzstan",
"Lao PDR","Saint Kitts and Nevis","Saint Lucia","Saint Vincent and the Grenadines",
"Slovakia","US","Burma")
# Simply use a for-cycle to change the name for the countries (note: ordering is important)
for ( i in seq_along( use_name ) ){
df$country[ df$country == alter_name[ i ] ] <- use_name[ i ]
}
# Write a for-loop to find those which are partial or complete matches!
# 1) auxillary table for countries without any population value
aux <- df %>% filter( is.na(population) )
# 2) Get the name of the countries
countries_nm <- aux$country
# 3) Iterate through all potential partial matches
for ( i in seq_along( countries_nm ) ){
# Select those observations where partial match exists
log_select <- ?str_detect( df$country , countries_nm[ i ] )
# Get the population values for partial matches
c_partial <- df$population[ log_select ]
# If there is a match: only two countries are selected and one is missing the other has population:
if ( length( c_partial ) == 2 & sum( is.na( c_partial ) ) == 1 ){
# Replace the missing value with the match
df$population[ log_select & is.na(df$population)] = c_partial[ !is.na( c_partial ) ]
# Remove the replaced variable
df <- df %>% filter( !(log_select & is.na( df$confirmed ) ) )
}
}
# 4) Check the results:
df %>% filter( is.na(population) )
#####
# Handle missing values:
View( df %>% filter( !complete.cases(df) ) )
# Drop if population, confirmed cases or death is missing
df <- df %>% filter( !( is.na( population ) | is.na( confirmed ) | is.na( death ) ))
#####
# Save clean data
my_path <- "../data/"
# COVID data
write_csv( df , paste0(my_path,'clean/covid_pop_09_11_2020_clean.csv'))
# Clear memory
rm(list=ls())
# Call the data from file
my_file <- "../data/clean/covid_pop_09_11_2020_clean.csv"
df <- read_csv(my_file)
View(df)
df <- subset(df, df$population < 300000000)
####
#
# Quick check on all HISTOGRAMS
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~key, scales = "free") +
geom_histogram()+
theme_wsj() +
scale_fill_wsj()
summary( df )
######
# Check basic scatter-plot:
#     No_of_death = alpha + beta * No_of_cases
#
# Where to use log-transformation? - level-level vs level-log vs log-level vs log-log
#
# 1) death - No_of_cases: level-level model without scaling
ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020)",y = "Number of registered death")
ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020, ln scale)",y = "Number of registered death") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
# changing the scale for No_of_death and No_of_confirmed for checking log-transformation
ggplot( df , aes(x = confirmed, y = death ))  +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020, ln scale)",y = "Number of registered death (ln scale)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans() )
# changing the scale for No_of_death for checking log-transformation: log y - level x
ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020)",y = "Number of registered death (ln scale)") +
scale_y_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020)",y = "Number of registered death")
ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020, ln scale)",y = "Number of registered death") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020)",y = "Number of registered death (ln scale)") +
scale_y_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
ggplot( df , aes(x = confirmed, y = death ))  +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020, ln scale)",y = "Number of registered death (ln scale)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans() )
ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020)",y = "Number of registered death")
ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020)",y = "Number of registered death")
ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020, ln scale)",y = "Number of registered death") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
ggplot( df , aes(x = confirmed, y = death)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020)",y = "Number of registered death (ln scale)") +
scale_y_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
ggplot( df , aes(x = confirmed, y = death ))  +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Number of registered case (31 October 2020, ln scale)",y = "Number of registered death (ln scale)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )+
scale_y_continuous( trans = log_trans() )
